#!/bin/bash

set -e

DOMAINS_FILE="domains.txt"
DNSMASQ_CONF="/etc/dnsmasq.d/lan.conf"

# Must be run as root
if [[ $EUID -ne 0 ]]; then
  echo "❌ Run this script as root."
  exit 1
fi

# Check domains.txt
if [[ ! -f "$DOMAINS_FILE" ]]; then
  echo "❌ File '$DOMAINS_FILE' not found. Use format: domain port"
  exit 1
fi

# Ask for server IP
read -rp "📥 Enter server IP (e.g., 192.168.1.10): " SERVER_IP
if [[ -z "$SERVER_IP" ]]; then
  echo "❌ Server IP cannot be empty"
  exit 1
fi

# Install dnsmasq if needed
if ! command -v dnsmasq &>/dev/null; then
  echo "📦 Installing dnsmasq..."
  apt update && apt install -y dnsmasq
else
  echo "✅ dnsmasq already installed"
fi

# Ensure dnsmasq.d directory exists
mkdir -p "$(dirname "$DNSMASQ_CONF")"

# Build dnsmasq config
echo "🛠 Generating $DNSMASQ_CONF..."
echo "# Auto-generated by setup-dnsmasq.sh" > "$DNSMASQ_CONF"
echo "listen-address=127.0.0.1,$SERVER_IP" >> "$DNSMASQ_CONF"
echo "domain-needed" >> "$DNSMASQ_CONF"
echo "bogus-priv" >> "$DNSMASQ_CONF"

# Read and process each line
while IFS= read -r line || [[ -n "$line" ]]; do
  DOMAIN=$(echo "$line" | awk '{print $1}')
  PORT=$(echo "$line" | awk '{print $2}')

  if [[ -n "$DOMAIN" && -n "$PORT" ]]; then
    echo "address=/$DOMAIN/$SERVER_IP" >> "$DNSMASQ_CONF"
  fi
done < "$DOMAINS_FILE"

# Restart dnsmasq
echo "🔄 Restarting dnsmasq..."
systemctl restart dnsmasq
systemctl enable dnsmasq

echo "✅ dnsmasq configured."

# Optional: Output Caddyfile blocks for reverse proxy
echo -e "\n🧩 Suggested Caddyfile blocks:\n"
while IFS= read -r line || [[ -n "$line" ]]; do
  DOMAIN=$(echo "$line" | awk '{print $1}')
  PORT=$(echo "$line" | awk '{print $2}')

  if [[ -n "$DOMAIN" && -n "$PORT" ]]; then
    cat <<EOF
$DOMAIN {
  reverse_proxy 127.0.0.1:$PORT
}
EOF
    echo ""
  fi
done < "$DOMAINS_FILE"

echo "💡 Paste these into your Caddyfile to complete the setup."
